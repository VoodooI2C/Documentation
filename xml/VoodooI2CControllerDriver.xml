<?xml version='1.0' encoding='UTF-8'?>
<class id="VoodooI2CControllerDriver" name="VoodooI2CControllerDriver" interface="true" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> Implements a driver for the Synopsys DesignWare I2C Controller which attaches to a <ref ref="VoodooI2CControllerNub#VoodooI2CControllerNub">VoodooI2CControllerNub</ref> object</brief>
  <doc>The members of this class are responsible for interfacing with the I2C bus and implementing the I2C protocol. The driver also
publishes nubs for each I2C slave device attached to the bus it drives.
</doc>
  <base access="public">
    <type name="IOService" />
  </base>
  <variable id="VoodooI2CControllerDriver::gMetaClass" name="gMetaClass">
    <type name="MetaClass" ref="VoodooI2CControllerDriver::MetaClass#VoodooI2CControllerDriver::MetaClass" />
  </variable>
  <variable id="VoodooI2CControllerDriver::metaClass" name="metaClass">
    <type name="OSMetaClass" qualifier=" const const *" />
  </variable>
  <class ref="VoodooI2CControllerDriver::MetaClass#VoodooI2CControllerDriver::MetaClass" name="MetaClass" />
  <field id="VoodooI2CControllerDriver::bus_device" name="bus_device">
    <type name="VoodooI2CControllerBusDevice" ref="VoodooI2CControllerBusDevice#VoodooI2CControllerBusDevice" />
  </field>
  <field id="VoodooI2CControllerDriver::device_nubs" name="device_nubs">
    <type name="OSArray" qualifier="*" />
  </field>
  <field id="VoodooI2CControllerDriver::nub" name="nub">
    <type name="VoodooI2CControllerNub" qualifier="*" ref="VoodooI2CControllerNub#VoodooI2CControllerNub" />
  </field>
  <constructor id="VoodooI2CControllerDriver::VoodooI2CControllerDriver" name="VoodooI2CControllerDriver" abstract="yes" />
  <method id="VoodooI2CControllerDriver::free" name="free" virtual="yes" abstract="yes">
    <brief> Frees <ref ref="VoodooI2CControllerDriver#VoodooI2CControllerDriver::VoodooI2CControllerDriver">VoodooI2CControllerDriver::VoodooI2CControllerDriver</ref> and <ref ref="VoodooI2CControllerDriver#VoodooI2CControllerDriver::VoodooI2CControllerDriver">VoodooI2CControllerDriver::VoodooI2CControllerDriver</ref> class</brief>
    <doc>This is the last function called during the unload routine and frees the memory
allocated in <ref ref="VoodooI2CControllerDriver#VoodooI2CControllerDriver::init">VoodooI2CControllerDriver::init</ref>.
</doc>
    <return>
      <type name="void" builtin="yes" />
    </return>
  </method>
  <method id="VoodooI2CControllerDriver::getMetaClass" name="getMetaClass" virtual="yes" abstract="yes">
    <return>
      <type name="OSMetaClass" qualifier=" const *" />
    </return>
  </method>
  <method id="VoodooI2CControllerDriver::handleInterrupt" name="handleInterrupt" abstract="yes">
    <brief>Handles an interrupt that has been asserted by the controller</brief>
    <doc />
    <return>
      <type name="void" builtin="yes" />
    </return>
    <argument name="target" id="VoodooI2CControllerDriver::handleInterrupt::target">
      <type name="OSObject" qualifier="*" />
    </argument>
    <argument name="refCon" id="VoodooI2CControllerDriver::handleInterrupt::refCon">
      <type name="void" qualifier="*" builtin="yes" />
    </argument>
    <argument name="nubDevice" id="VoodooI2CControllerDriver::handleInterrupt::nubDevice">
      <type name="IOService" qualifier="*" />
    </argument>
    <argument name="source" id="VoodooI2CControllerDriver::handleInterrupt::source">
      <type name="int" builtin="yes" />
    </argument>
  </method>
  <method id="VoodooI2CControllerDriver::init" name="init" virtual="yes" abstract="yes">
    <brief> Initialises <ref ref="VoodooI2CControllerDriver#VoodooI2CControllerDriver::VoodooI2CControllerDriver">VoodooI2CControllerDriver::VoodooI2CControllerDriver</ref> and <ref ref="VoodooI2CControllerDriver#VoodooI2CControllerDriver::VoodooI2CControllerDriver">VoodooI2CControllerDriver::VoodooI2CControllerDriver</ref> class</brief>
    <doc />
    <return>
      <type name="bool" builtin="yes" />
    </return>
    <argument name="properties" id="VoodooI2CControllerDriver::init::properties">
      <type name="OSDictionary" qualifier="*" />
    </argument>
  </method>
  <method id="VoodooI2CControllerDriver::probe" name="probe" virtual="yes" abstract="yes">
    <brief> Probes the controller to determine whether or not we can drive it</brief>
    <doc />
    <return>
      <type name="VoodooI2CControllerDriver" qualifier="*" ref="VoodooI2CControllerDriver#VoodooI2CControllerDriver" />
    </return>
    <argument name="provider" id="VoodooI2CControllerDriver::probe::provider">
      <type name="IOService" qualifier="*" />
    </argument>
    <argument name="score" id="VoodooI2CControllerDriver::probe::score">
      <type name="SInt32" qualifier="*" />
    </argument>
  </method>
  <method id="VoodooI2CControllerDriver::start" name="start" virtual="yes" abstract="yes">
    <brief> Starts the bus</brief>
    <doc />
    <return>
      <type name="bool" builtin="yes" />
    </return>
    <argument name="provider" id="VoodooI2CControllerDriver::start::provider">
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method id="VoodooI2CControllerDriver::stop" name="stop" virtual="yes" abstract="yes">
    <brief> Stops the bus</brief>
    <doc />
    <return>
      <type name="void" builtin="yes" />
    </return>
    <argument name="provider" id="VoodooI2CControllerDriver::stop::provider">
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method id="VoodooI2CControllerDriver::transferI2C" name="transferI2C" abstract="yes">
    <brief> Directs the command gate to add an I2C transfer routine to the work loop</brief>
    <doc />
    <return>
      <type name="IOReturn" />
    </return>
    <argument name="messages" id="VoodooI2CControllerDriver::transferI2C::messages">
      <type name="VoodooI2CControllerBusMessage" qualifier="*" ref="VoodooI2CControllerBusMessage#VoodooI2CControllerBusMessage" />
    </argument>
    <argument name="number" id="VoodooI2CControllerDriver::transferI2C::number">
      <type name="int" builtin="yes" />
    </argument>
  </method>
  <constructor id="VoodooI2CControllerDriver::VoodooI2CControllerDriver" name="VoodooI2CControllerDriver" access="protected" abstract="yes">
    <argument name="" id="VoodooI2CControllerDriver::VoodooI2CControllerDriver::">
      <type name="OSMetaClass" qualifier=" const *" />
    </argument>
  </constructor>
  <destructor id="VoodooI2CControllerDriver::~VoodooI2CControllerDriver" name="~VoodooI2CControllerDriver" access="protected" virtual="yes" abstract="yes" />
</class>
