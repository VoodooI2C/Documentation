<?xml version='1.0' encoding='UTF-8'?>
<class id="VoodooI2CDeviceNub" name="VoodooI2CDeviceNub" abstract="true" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> Implements a device nub to which an instance of a device driver may attach. Examples include <ref ref="VoodooI2CHIDDevice#VoodooI2CHIDDevice">VoodooI2CHIDDevice</ref>
  </brief>
  <doc>The members of this class are responsible for low-level interfacing with an I2C slave device. The public
member functions that are not inherited from &amp;lt;IOService&amp;gt; collectively form the so-called 'device API'.
Device drivers access the API in order to perform low-level hardware operations such as receiving interrupts
and I2C protocol messaging.
</doc>
  <base access="public">
    <type name="IOService" />
  </base>
  <variable id="VoodooI2CDeviceNub::gMetaClass" name="gMetaClass">
    <type name="MetaClass" ref="VoodooI2CDeviceNub::MetaClass#VoodooI2CDeviceNub::MetaClass" />
  </variable>
  <variable id="VoodooI2CDeviceNub::metaClass" name="metaClass">
    <type name="OSMetaClass" qualifier=" const const *" />
  </variable>
  <class ref="VoodooI2CDeviceNub::MetaClass#VoodooI2CDeviceNub::MetaClass" name="MetaClass" />
  <constructor id="VoodooI2CDeviceNub::VoodooI2CDeviceNub" name="VoodooI2CDeviceNub" abstract="yes" />
  <method id="VoodooI2CDeviceNub::attach" name="attach" abstract="yes">
    <brief> Attaches <ref ref="VoodooI2CController#VoodooI2CController">VoodooI2CController</ref> class</brief>
    <doc />
    <return>
      <type name="bool" builtin="yes" />
    </return>
    <argument name="provider" id="VoodooI2CDeviceNub::attach::provider">
      <type name="IOService" qualifier="*" />
    </argument>
    <argument name="child" id="VoodooI2CDeviceNub::attach::child">
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method id="VoodooI2CDeviceNub::disableInterrupt" name="disableInterrupt" virtual="yes" abstract="yes">
    <brief> Disables an interrupt source</brief>
    <doc />
    <return>
      <type name="IOReturn" />
    </return>
    <argument name="source" id="VoodooI2CDeviceNub::disableInterrupt::source">
      <type name="int" builtin="yes" />
    </argument>
  </method>
  <method id="VoodooI2CDeviceNub::enableInterrupt" name="enableInterrupt" virtual="yes" abstract="yes">
    <brief> Enables an interrupt source</brief>
    <doc />
    <return>
      <type name="IOReturn" />
    </return>
    <argument name="source" id="VoodooI2CDeviceNub::enableInterrupt::source">
      <type name="int" builtin="yes" />
    </argument>
  </method>
  <method id="VoodooI2CDeviceNub::evaluateDSM" name="evaluateDSM" abstract="yes">
    <brief> Evaluate _DSM for specific GUID and function index. Assume Revision ID is 1 for now.</brief>
    <doc />
    <return>
      <type name="IOReturn" />
    </return>
    <argument name="uuid" id="VoodooI2CDeviceNub::evaluateDSM::uuid">
      <type name="char" qualifier=" const *" builtin="yes" />
    </argument>
    <argument name="index" id="VoodooI2CDeviceNub::evaluateDSM::index">
      <type name="UInt32" />
    </argument>
    <argument name="result" id="VoodooI2CDeviceNub::evaluateDSM::result">
      <type name="OSObject" qualifier="**" />
    </argument>
  </method>
  <method id="VoodooI2CDeviceNub::getDeviceResourcesDSM" name="getDeviceResourcesDSM" abstract="yes">
    <brief> Evaluate _DSM for availability of I2C resources like GPIO interrupts.</brief>
    <doc />
    <return>
      <type name="IOReturn" />
    </return>
    <argument name="index" id="VoodooI2CDeviceNub::getDeviceResourcesDSM::index">
      <type name="UInt32" />
    </argument>
    <argument name="result" id="VoodooI2CDeviceNub::getDeviceResourcesDSM::result">
      <type name="OSObject" qualifier="**" />
    </argument>
  </method>
  <method id="VoodooI2CDeviceNub::getInterruptType" name="getInterruptType" virtual="yes" abstract="yes">
    <brief> Gets the type of an interrupt source</brief>
    <doc />
    <return>
      <type name="IOReturn" />
    </return>
    <argument name="source" id="VoodooI2CDeviceNub::getInterruptType::source">
      <type name="int" builtin="yes" />
    </argument>
    <argument name="interruptType" id="VoodooI2CDeviceNub::getInterruptType::interruptType">
      <type name="int" qualifier="*" builtin="yes" />
    </argument>
  </method>
  <method id="VoodooI2CDeviceNub::getMetaClass" name="getMetaClass" virtual="yes" abstract="yes">
    <return>
      <type name="OSMetaClass" qualifier=" const *" />
    </return>
  </method>
  <method id="VoodooI2CDeviceNub::getWorkLoop" name="getWorkLoop" virtual="yes" abstract="yes">
    <brief> Gets an *IOWorkLoop* object</brief>
    <doc>This function either grabs the existing workloop or creates a new one if none is found. This workloop is intended to be used by
the nub itself along with any drivers that attach to it.
</doc>
    <return>
      <type name="IOWorkLoop" qualifier="*" />
    </return>
  </method>
  <method id="VoodooI2CDeviceNub::readI2C" name="readI2C" abstract="yes">
    <brief> Transmits an I2C read request to the slave device</brief>
    <doc />
    <return>
      <type name="IOReturn" />
    </return>
    <argument name="values" id="VoodooI2CDeviceNub::readI2C::values">
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument name="length" id="VoodooI2CDeviceNub::readI2C::length">
      <type name="UInt16" />
    </argument>
  </method>
  <method id="VoodooI2CDeviceNub::registerInterrupt" name="registerInterrupt" virtual="yes" abstract="yes">
    <brief> Registers a slave for interrupts</brief>
    <doc />
    <return>
      <type name="IOReturn" />
    </return>
    <argument name="source" id="VoodooI2CDeviceNub::registerInterrupt::source">
      <type name="int" builtin="yes" />
    </argument>
    <argument name="target" id="VoodooI2CDeviceNub::registerInterrupt::target">
      <type name="OSObject" qualifier="*" />
    </argument>
    <argument name="handler" id="VoodooI2CDeviceNub::registerInterrupt::handler">
      <type name="IOInterruptAction" />
    </argument>
    <argument name="refcon" id="VoodooI2CDeviceNub::registerInterrupt::refcon">
      <type name="void" qualifier="*" builtin="yes" />
    </argument>
  </method>
  <method id="VoodooI2CDeviceNub::start" name="start" virtual="yes" abstract="yes">
    <brief> Starts the device nub</brief>
    <doc />
    <return>
      <type name="bool" builtin="yes" />
    </return>
    <argument name="provider" id="VoodooI2CDeviceNub::start::provider">
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method id="VoodooI2CDeviceNub::stop" name="stop" virtual="yes" abstract="yes">
    <brief> Stops the device nub</brief>
    <doc />
    <return>
      <type name="void" builtin="yes" />
    </return>
    <argument name="provider" id="VoodooI2CDeviceNub::stop::provider">
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method id="VoodooI2CDeviceNub::unregisterInterrupt" name="unregisterInterrupt" virtual="yes" abstract="yes">
    <brief> Unregisters a slave for interrupts</brief>
    <doc />
    <return>
      <type name="IOReturn" />
    </return>
    <argument name="source" id="VoodooI2CDeviceNub::unregisterInterrupt::source">
      <type name="int" builtin="yes" />
    </argument>
  </method>
  <method id="VoodooI2CDeviceNub::writeI2C" name="writeI2C" abstract="yes">
    <brief> Transmits an I2C write request to the slave device</brief>
    <doc />
    <return>
      <type name="IOReturn" />
    </return>
    <argument name="values" id="VoodooI2CDeviceNub::writeI2C::values">
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument name="length" id="VoodooI2CDeviceNub::writeI2C::length">
      <type name="UInt16" />
    </argument>
  </method>
  <method id="VoodooI2CDeviceNub::writeReadI2C" name="writeReadI2C" abstract="yes">
    <brief> Transmits an I2C write-read request to the slave device</brief>
    <doc />
    <return>
      <type name="IOReturn" />
    </return>
    <argument name="write_buffer" id="VoodooI2CDeviceNub::writeReadI2C::write_buffer">
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument name="write_length" id="VoodooI2CDeviceNub::writeReadI2C::write_length">
      <type name="UInt16" />
    </argument>
    <argument name="read_buffer" id="VoodooI2CDeviceNub::writeReadI2C::read_buffer">
      <type name="UInt8" qualifier="*" />
    </argument>
    <argument name="read_length" id="VoodooI2CDeviceNub::writeReadI2C::read_length">
      <type name="UInt16" />
    </argument>
  </method>
  <constructor id="VoodooI2CDeviceNub::VoodooI2CDeviceNub" name="VoodooI2CDeviceNub" access="protected" abstract="yes">
    <argument name="" id="VoodooI2CDeviceNub::VoodooI2CDeviceNub::">
      <type name="OSMetaClass" qualifier=" const *" />
    </argument>
  </constructor>
  <destructor id="VoodooI2CDeviceNub::~VoodooI2CDeviceNub" name="~VoodooI2CDeviceNub" access="protected" virtual="yes" abstract="yes" />
</class>
