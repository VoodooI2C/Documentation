<?xml version='1.0' encoding='UTF-8'?>
<class id="VoodooI2CPrecisionTouchpadHIDEventDriver" name="VoodooI2CPrecisionTouchpadHIDEventDriver" interface="true" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> Implements an HID Event Driver for Precision Touchpad devices as specified by Microsoft's protocol in the following document: https://docs.microsoft.com/en-us/windows-hardware/design/component-guidelines/precision-touchpad-devices</brief>
  <doc>The members of this class are responsible for instructing a Precision Touchpad device to enter Touchpad mode.
</doc>
  <base access="public">
    <type name="VoodooI2CMultitouchHIDEventDriver" ref="VoodooI2CMultitouchHIDEventDriver#VoodooI2CMultitouchHIDEventDriver" />
    <brief> Implements an HID Event Driver for HID devices that expose a digitiser usage page.</brief>
  </base>
  <variable id="VoodooI2CPrecisionTouchpadHIDEventDriver::gMetaClass" name="gMetaClass">
    <type name="MetaClass" ref="VoodooI2CPrecisionTouchpadHIDEventDriver::MetaClass#VoodooI2CPrecisionTouchpadHIDEventDriver::MetaClass" />
  </variable>
  <variable id="VoodooI2CPrecisionTouchpadHIDEventDriver::metaClass" name="metaClass">
    <type name="OSMetaClass" qualifier=" const const *" />
  </variable>
  <class ref="VoodooI2CPrecisionTouchpadHIDEventDriver::MetaClass#VoodooI2CPrecisionTouchpadHIDEventDriver::MetaClass" name="MetaClass" />
  <constructor id="VoodooI2CPrecisionTouchpadHIDEventDriver::VoodooI2CPrecisionTouchpadHIDEventDriver" name="VoodooI2CPrecisionTouchpadHIDEventDriver" abstract="yes" />
  <method id="VoodooI2CPrecisionTouchpadHIDEventDriver::getMetaClass" name="getMetaClass" override="yes" virtual="yes" abstract="yes">
    <return>
      <type name="OSMetaClass" qualifier=" const *" />
    </return>
    <override name="VoodooI2CMultitouchHIDEventDriver::getMetaClass" ref="VoodooI2CMultitouchHIDEventDriver#VoodooI2CMultitouchHIDEventDriver::getMetaClass" />
  </method>
  <method id="VoodooI2CPrecisionTouchpadHIDEventDriver::handleInterruptReport" name="handleInterruptReport" override="yes" virtual="yes" abstract="yes">
    <brief> Called during the interrupt routine to handle an interrupt report</brief>
    <doc />
    <return>
      <type name="void" builtin="yes" />
    </return>
    <argument name="timestamp" id="VoodooI2CPrecisionTouchpadHIDEventDriver::handleInterruptReport::timestamp">
      <type name="AbsoluteTime" />
    </argument>
    <argument name="report" id="VoodooI2CPrecisionTouchpadHIDEventDriver::handleInterruptReport::report">
      <type name="IOMemoryDescriptor" qualifier="*" />
    </argument>
    <argument name="report_type" id="VoodooI2CPrecisionTouchpadHIDEventDriver::handleInterruptReport::report_type">
      <type name="IOHIDReportType" />
    </argument>
    <argument name="report_id" id="VoodooI2CPrecisionTouchpadHIDEventDriver::handleInterruptReport::report_id">
      <type name="UInt32" />
    </argument>
    <override name="VoodooI2CMultitouchHIDEventDriver::handleInterruptReport" ref="VoodooI2CMultitouchHIDEventDriver#VoodooI2CMultitouchHIDEventDriver::handleInterruptReport" />
  </method>
  <method id="VoodooI2CPrecisionTouchpadHIDEventDriver::handleStart" name="handleStart" override="yes" virtual="yes" abstract="yes">
    <brief> Called during the start routine to set up the HID Event Driver</brief>
    <doc />
    <return>
      <type name="bool" builtin="yes" />
    </return>
    <argument name="provider" id="VoodooI2CPrecisionTouchpadHIDEventDriver::handleStart::provider">
      <type name="IOService" qualifier="*" />
    </argument>
    <override name="VoodooI2CMultitouchHIDEventDriver::handleStart" ref="VoodooI2CMultitouchHIDEventDriver#VoodooI2CMultitouchHIDEventDriver::handleStart" />
  </method>
  <method id="VoodooI2CPrecisionTouchpadHIDEventDriver::setPowerState" name="setPowerState" override="yes" virtual="yes" abstract="yes">
    <brief> Called by the OS in order to notify the driver that the device should change power state</brief>
    <doc />
    <return>
      <type name="IOReturn" />
    </return>
    <argument name="whichState" id="VoodooI2CPrecisionTouchpadHIDEventDriver::setPowerState::whichState">
      <type name="unsigned long" builtin="yes" />
    </argument>
    <argument name="whatDevice" id="VoodooI2CPrecisionTouchpadHIDEventDriver::setPowerState::whatDevice">
      <type name="IOService" qualifier="*" />
    </argument>
    <override name="VoodooI2CMultitouchHIDEventDriver::setPowerState" ref="VoodooI2CMultitouchHIDEventDriver#VoodooI2CMultitouchHIDEventDriver::setPowerState" />
  </method>
  <constructor id="VoodooI2CPrecisionTouchpadHIDEventDriver::VoodooI2CPrecisionTouchpadHIDEventDriver" name="VoodooI2CPrecisionTouchpadHIDEventDriver" access="protected" abstract="yes">
    <argument name="" id="VoodooI2CPrecisionTouchpadHIDEventDriver::VoodooI2CPrecisionTouchpadHIDEventDriver::">
      <type name="OSMetaClass" qualifier=" const *" />
    </argument>
  </constructor>
  <destructor id="VoodooI2CPrecisionTouchpadHIDEventDriver::~VoodooI2CPrecisionTouchpadHIDEventDriver" name="~VoodooI2CPrecisionTouchpadHIDEventDriver" access="protected" virtual="yes" abstract="yes" />
  <method id="VoodooI2CPrecisionTouchpadHIDEventDriver::parseElements" name="parseElements" access="protected" override="yes" virtual="yes" abstract="yes">
    <brief />
    <doc>
Overriden to only check for kHIDUsage_Dig_TouchPad
</doc>
    <return>
      <type name="IOReturn" />
    </return>
    <argument name="" id="VoodooI2CPrecisionTouchpadHIDEventDriver::parseElements::">
      <type name="UInt32" />
    </argument>
    <override name="VoodooI2CMultitouchHIDEventDriver::parseElements" ref="VoodooI2CMultitouchHIDEventDriver#VoodooI2CMultitouchHIDEventDriver::parseElements" />
  </method>
</class>
