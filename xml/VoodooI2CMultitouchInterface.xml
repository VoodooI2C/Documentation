<?xml version='1.0' encoding='UTF-8'?>
<class id="VoodooI2CMultitouchInterface" name="VoodooI2CMultitouchInterface" interface="true" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> Acts as a middleman between multitouch capable device drivers such as &amp;lt;VoodooI2CHIDMultitouchEventDriver&amp;gt; and a <ref ref="VoodooI2CMultitouchEngine#VoodooI2CMultitouchEngine">VoodooI2CMultitouchEngine</ref>
  </brief>
  <doc>This class is designed to allow multiple &amp;lt;VoodooI2CMultitouchEngines&amp;gt; (or inherited classes thereof) to attach and receive interrupt reports.
This allows for situations in which different multitouch engines handle different gestures.
</doc>
  <base access="public">
    <type name="IOService" />
  </base>
  <variable id="VoodooI2CMultitouchInterface::gMetaClass" name="gMetaClass">
    <type name="MetaClass" ref="VoodooI2CMultitouchInterface::MetaClass#VoodooI2CMultitouchInterface::MetaClass" />
  </variable>
  <variable id="VoodooI2CMultitouchInterface::metaClass" name="metaClass">
    <type name="OSMetaClass" qualifier=" const const *" />
  </variable>
  <class ref="VoodooI2CMultitouchInterface::MetaClass#VoodooI2CMultitouchInterface::MetaClass" name="MetaClass" />
  <field id="VoodooI2CMultitouchInterface::logical_max_x" name="logical_max_x">
    <type name="UInt32" />
  </field>
  <field id="VoodooI2CMultitouchInterface::logical_max_y" name="logical_max_y">
    <type name="UInt32" />
  </field>
  <field id="VoodooI2CMultitouchInterface::physical_max_x" name="physical_max_x">
    <type name="UInt32" />
  </field>
  <field id="VoodooI2CMultitouchInterface::physical_max_y" name="physical_max_y">
    <type name="UInt32" />
  </field>
  <constructor id="VoodooI2CMultitouchInterface::VoodooI2CMultitouchInterface" name="VoodooI2CMultitouchInterface" abstract="yes" />
  <method id="VoodooI2CMultitouchInterface::getMetaClass" name="getMetaClass" virtual="yes" abstract="yes">
    <return>
      <type name="OSMetaClass" qualifier=" const *" />
    </return>
  </method>
  <method id="VoodooI2CMultitouchInterface::handleClose" name="handleClose" virtual="yes" abstract="yes">
    <brief> Controls the close behavior of <ref ref="VoodooI2CMultitouchInterface#VoodooI2CMultitouchInterface::VoodooI2CMultitouchInterface">VoodooI2CMultitouchInterface::VoodooI2CMultitouchInterface</ref> and <ref ref="VoodooI2CMultitouchInterface#VoodooI2CMultitouchInterface::VoodooI2CMultitouchInterface">VoodooI2CMultitouchInterface::VoodooI2CMultitouchInterface</ref>
    </brief>
    <doc />
    <return>
      <type name="void" builtin="yes" />
    </return>
    <argument name="client" id="VoodooI2CMultitouchInterface::handleClose::client">
      <type name="IOService" qualifier="*" />
    </argument>
    <argument name="options" id="VoodooI2CMultitouchInterface::handleClose::options">
      <type name="IOOptionBits" />
    </argument>
  </method>
  <method id="VoodooI2CMultitouchInterface::handleInterruptReport" name="handleInterruptReport" abstract="yes">
    <brief> Forwards a multitouch event to the attached multitouch engines</brief>
    <doc />
    <return>
      <type name="void" builtin="yes" />
    </return>
    <argument name="event" id="VoodooI2CMultitouchInterface::handleInterruptReport::event">
      <type name="VoodooI2CMultitouchEvent" ref="VoodooI2CMultitouchEvent#VoodooI2CMultitouchEvent" />
    </argument>
    <argument name="timestamp" id="VoodooI2CMultitouchInterface::handleInterruptReport::timestamp">
      <type name="AbsoluteTime" />
    </argument>
  </method>
  <method id="VoodooI2CMultitouchInterface::handleIsOpen" name="handleIsOpen" virtual="yes" abstract="yes">
    <brief> Provides a check if the calling IOService instance has called open</brief>
    <doc />
    <return>
      <type name="bool" builtin="yes" />
    </return>
    <argument name="forClient" id="VoodooI2CMultitouchInterface::handleIsOpen::forClient">
      <type name="IOService" qualifier=" const *" />
    </argument>
  </method>
  <method id="VoodooI2CMultitouchInterface::handleOpen" name="handleOpen" virtual="yes" abstract="yes">
    <brief> Controls the open behavior of <ref ref="VoodooI2CMultitouchInterface#VoodooI2CMultitouchInterface::VoodooI2CMultitouchInterface">VoodooI2CMultitouchInterface::VoodooI2CMultitouchInterface</ref> and <ref ref="VoodooI2CMultitouchInterface#VoodooI2CMultitouchInterface::VoodooI2CMultitouchInterface">VoodooI2CMultitouchInterface::VoodooI2CMultitouchInterface</ref>
    </brief>
    <doc />
    <return>
      <type name="bool" builtin="yes" />
    </return>
    <argument name="forClient" id="VoodooI2CMultitouchInterface::handleOpen::forClient">
      <type name="IOService" qualifier="*" />
    </argument>
    <argument name="options" id="VoodooI2CMultitouchInterface::handleOpen::options">
      <type name="IOOptionBits" />
    </argument>
    <argument name="arg" id="VoodooI2CMultitouchInterface::handleOpen::arg">
      <type name="void" qualifier="*" builtin="yes" />
    </argument>
  </method>
  <method id="VoodooI2CMultitouchInterface::orderEngines" name="orderEngines" static="yes" abstract="yes">
    <brief> Orders engines according to <ref ref="VoodooI2CMultitouchEngine#VoodooI2CMultitouchEngine::getScore">VoodooI2CMultitouchEngine::getScore</ref>
    </brief>
    <doc />
    <return>
      <type name="SInt8" />
    </return>
    <argument name="a" id="VoodooI2CMultitouchInterface::orderEngines::a">
      <type name="VoodooI2CMultitouchEngine" qualifier="*" ref="VoodooI2CMultitouchEngine#VoodooI2CMultitouchEngine" />
    </argument>
    <argument name="b" id="VoodooI2CMultitouchInterface::orderEngines::b">
      <type name="VoodooI2CMultitouchEngine" qualifier="*" ref="VoodooI2CMultitouchEngine#VoodooI2CMultitouchEngine" />
    </argument>
  </method>
  <method id="VoodooI2CMultitouchInterface::setProperty" name="setProperty" virtual="yes" abstract="yes">
    <return>
      <type name="bool" builtin="yes" />
    </return>
    <argument name="key" id="VoodooI2CMultitouchInterface::setProperty::key">
      <type name="OSSymbol" qualifier=" const *" />
    </argument>
    <argument name="object" id="VoodooI2CMultitouchInterface::setProperty::object">
      <type name="OSObject" qualifier="*" />
    </argument>
  </method>
  <method id="VoodooI2CMultitouchInterface::start" name="start" virtual="yes" abstract="yes">
    <brief> Sets up the multitouch interface</brief>
    <doc />
    <return>
      <type name="bool" builtin="yes" />
    </return>
    <argument name="provider" id="VoodooI2CMultitouchInterface::start::provider">
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method id="VoodooI2CMultitouchInterface::stop" name="stop" virtual="yes" abstract="yes">
    <brief> Stops up the multitouch interface</brief>
    <doc />
    <return>
      <type name="void" builtin="yes" />
    </return>
    <argument name="provider" id="VoodooI2CMultitouchInterface::stop::provider">
      <type name="IOService" qualifier="*" />
    </argument>
  </method>
  <method id="VoodooI2CMultitouchInterface::willTerminate" name="willTerminate" virtual="yes" abstract="yes">
    <brief> Notification that a provider will be terminated, this method is present to prevent crashes on macOS 13.0+</brief>
    <doc />
    <return>
      <type name="bool" builtin="yes" />
    </return>
    <argument name="provider" id="VoodooI2CMultitouchInterface::willTerminate::provider">
      <type name="IOService" qualifier="*" />
    </argument>
    <argument name="options" id="VoodooI2CMultitouchInterface::willTerminate::options">
      <type name="IOOptionBits" />
    </argument>
  </method>
  <constructor id="VoodooI2CMultitouchInterface::VoodooI2CMultitouchInterface" name="VoodooI2CMultitouchInterface" access="protected" abstract="yes">
    <argument name="" id="VoodooI2CMultitouchInterface::VoodooI2CMultitouchInterface::">
      <type name="OSMetaClass" qualifier=" const *" />
    </argument>
  </constructor>
  <destructor id="VoodooI2CMultitouchInterface::~VoodooI2CMultitouchInterface" name="~VoodooI2CMultitouchInterface" access="protected" virtual="yes" abstract="yes" />
</class>
